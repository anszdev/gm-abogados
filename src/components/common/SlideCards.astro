---
import Arrow from "../icons/Arrow.astro";
import ArrowR from "../icons/ArrowR.astro";
import { Card } from "./Card";

interface Props {
  cardsData?: {
    title: string;
    content?: string;
    icon: string;
    tags?: string[];
    href?: string;
  }[];
}

const { cardsData = [] } = Astro.props;
---

<div>
  <div class="gm_slides reveal">
    {
      cardsData.map((card) => (
        <Card
          client:visible
          cardTitle={card.title}
          cardContent={card.content}
          cardIcon={card.icon}
          cardTags={card.tags}
          href={card.href}
        />
      ))
    }
  </div>
  <div class="gm_slide-buttons reveal">
    <button class="gm_slide-button" id="prev-slide"><Arrow /></button>
    <button class="gm_slide-button" id="next-slide"><ArrowR /></button>
  </div>
</div>

<style>
  .gm_slide-button {
    width: 3rem;
    height: 3rem;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    border-radius: 999px;
    background: linear-gradient(to bottom, var(--gm-accent), #d9c39c);
    border: none;
    cursor: pointer;
    color: var(--gm-bg-secondary);
    transition: transform 150ms ease-in-out;

    &:active {
      transform: scale(0.95);
    }

    @media screen and (width >= 1024px) {
      display: none;
    }
  }

  .gm_slides {
    display: flex;
    width: 100%;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    gap: 1rem;
    margin: 2rem 0;

    &::-webkit-scrollbar {
      width: 1px;
      height: 1px;
    }

    &::-webkit-scrollbar-thumb {
      background: transparent;
    }

    &::-webkit-scrollbar-track {
      background: var(--gm-bg-secondary);
    }

    @media screen and (width >= 768px) {
      margin: 5rem 0;
      gap: 2rem;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const slideContainer = document.querySelector(".gm_slides");
    const prevButton = document.getElementById("prev-slide");
    const nextButton = document.getElementById("next-slide");
    const slides = document.querySelectorAll(".gm_slide-card");

    if (!slideContainer || !prevButton || !nextButton || slides.length === 0) {
      console.error(
        "No se encontraron los elementos necesarios para el carrusel.",
      );
      return;
    }

    let currentIndex = 0;
    const totalSlides = slides.length;

    /**
     * Actualiza la posición del scroll para mostrar el slide correcto.
     */
    const updateSliderPosition = () => {
      // Usamos el ancho de un slide individual para el cálculo
      const slideWidth = slides[0].clientWidth;
      const newScrollLeft = currentIndex * slideWidth;
      slideContainer.scrollTo({
        left: newScrollLeft,
        behavior: "smooth",
      });
    };

    // Evento para el botón "siguiente"
    nextButton.addEventListener("click", () => {
      if (currentIndex < totalSlides - 1) {
        currentIndex++;
        updateSliderPosition();
      }
    });

    // Evento para el botón "anterior"
    prevButton.addEventListener("click", () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateSliderPosition();
      }
    });

    // Evento para reajustar el carrusel si cambia el tamaño de la ventana
    window.addEventListener("resize", updateSliderPosition);
  });
</script>
